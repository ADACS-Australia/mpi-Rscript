#!/usr/bin/env bash
{

# Exit on any error
set -e

# Don't use blocking sends by default
BLOCKING_SEND=false

# Loop over command line arguments
for ((i=1; i<=$#; i++)); do

    # Print help
    if [ "${!i}" == "-h" ] || [ "${!i}" == "--help" ]; then
        cat << EOF
This script is just a wrapper around Rscript for running MPI enabled R programs with a master-slave parallelism.
It also ensures that 'snow' MPI clusters use non-blocking sends.

e.g. usage:
    mpirun -n 4 mpi-Rscript <my-script>

options:
    -h, --help          Print this message
    -b, --blocking      Use blocking mpi sends in snow cluster
EOF
        exit 1
    fi

    # Turn on blocking sends
    if [ "${!i}" == "-b" ] || [ "${!i}" == "--blocking" ]; then
        shift
        BLOCKING_SEND=true
    fi
done

# Create temp file for overloading snow's MPI send function
tmp_modfile=$(mktemp /tmp/mpi-Rprofile-mods.XXXXXX)
if ! $BLOCKING_SEND; then
cat > "${tmp_modfile}" << 'EOF'
sendData.MPInode <- function(node, data) {Rmpi::mpi.isend.Robj(data, node$rank, node$SENDTAG, node$comm)}
EOF
fi

# Create temporary Rprofile file
tmp_rprofile=$(mktemp /tmp/mpi-Rprofile.XXXXXX)
cat > "${tmp_rprofile}" << EOF
insertSource("${tmp_modfile}", package="snow")

if (Rmpi::mpi.comm.rank(0) > 0) {
    sys.load.image(".RData", TRUE)
    .First.sys()
    sink(file = "/dev/null")
    snow::slaveLoop(snow::makeMPImaster())
    Rmpi::mpi.quit()
} else {
    snow::makeMPIcluster()
    .Last <<- function() {
        cl <- snow::getMPIcluster()
        if (!is.null(cl)) {
            snow::stopCluster(cl)
        }
        Rmpi::mpi.quit()
    }
}
EOF

# Use Rprofile file to affect behaviour of master/slaves on launch and shutdown
export R_PROFILE="${tmp_rprofile}"

if test ! -z "${LAMRANK}" ; then
    # use the LAMRANK environment variable set by LAM-MPI's mpirun to
    # run R with appropriate arguments for master and workers.
    if test "${LAMRANK}" -eq 0 ; then
        Rscript $*
    else
        R --slave > /dev/null 2>&1
    fi
elif test ! -z "${MV2_COMM_WORLD_RANK}" ; then
    # For MVAPICH2
    if test "${MV2_COMM_WORLD_RANK}" -eq 0 ; then
        Rscript --no-save $*
    else
        R --slave > /dev/null 2>&1
    fi
elif test ! -z "${OMPI_MCA_ns_nds_vpid}" ; then
    # Similar approach for OpenMPI using the OMPI_MCA_ns_nds_vpid
    # variable.  This is for backward compatibility with pre-1.3
    # versions.  The master R process thinks it is non-interactive so
    # for now --no-save or something like that is needed.
    if test "${OMPI_MCA_ns_nds_vpid}" -eq 0 ; then
        Rscript --no-save $*
    else
        R --slave > /dev/null 2>&1
    fi
elif test ! -z "${OMPI_COMM_WORLD_RANK}" ; then
    # Similar approach for OpenMPI using the OMPI_COMM_WORLD_RANK
    # variable.  This is the correct variable to use as of v1.3+.  The
    # master R process thinks it is non-interactive so for now
    # --no-save or something like that is needed.
    if test "${OMPI_COMM_WORLD_RANK}" -eq 0 ; then
        Rscript --no-save $*
    else
        R --slave > /dev/null 2>&1
    fi
else
    # The fallback is to use the same arguments on master and workers,
    # with --no-save for cases where workers don't have a terminal.
    # This means that things like CMD batch won't work. It seems to be
    # important NOT to use exec here, at least when this code runs under LAM.
    Rscript --no-save $*
fi

# Clean up temp files
rm -f "${tmp_rprofile}" "${tmp_modfile}"

exit
}
